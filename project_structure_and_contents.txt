Project structure
-----------------
./
    requirements.txt
    .gitignore
    app.py
    app.yaml
    .bash_history
    .gcloudignore
    __pycache__/
        app.cpython-310.pyc
    templates/
        manage_categories.html
        edit_question.html
        index.html
        register.html
        change_password.html
        login.html
    static/
        styles.css

./
    requirements.txt
    ----------------
    # Flask==2.1.2
    # Flask-Login==0.6.2
    # matplotlib==3.5.2
    # Werkzeug==2.1.2
    # gunicorn==20.1.0
    # google-cloud-storage==2.2.0
    # cryptography==3.4.8
    
    Flask==3.0.3
    Flask-Login==0.6.3
    matplotlib==3.8.3
    werkzeug==3.0.3
    gunicorn==20.1.0
    google-cloud-storage==2.2.0

    .gitignore
    ----------
    __pycache__/
    google-cloud-sdk
    google-cloud-cli-478.0.0-linux-x86_64.tar.gz
    guiroman_venv

    app.py
    ------
    from flask import Flask, render_template, request, redirect, flash, url_for, send_file, jsonify
    from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
    import json
    import os
    import matplotlib.pyplot as plt
    import matplotlib.font_manager as fm
    from io import BytesIO
    import base64
    from werkzeug.security import generate_password_hash, check_password_hash
    from datetime import datetime
    from google.cloud import storage
    
    # Google Cloud Storage 초기화
    def init_storage_client():
        return storage.Client()
    
    storage_client = init_storage_client()
    bucket_name = 'guiroman_english_bucket'  # 실제 버킷 이름으로 대체
    
    
    app = Flask(__name__)
    app.secret_key = 'your_secret_key'
    
    
    login_manager = LoginManager()
    login_manager.init_app(app)
    login_manager.login_view = 'login'
    
    
    DATA_FILE = 'data.json'
    USERS_FILE = 'users.json'
    VOC_FILE = 'voc.json'
    CATEGORIES_FILE = 'categories.json'
    FONT_PATH = 'templates/NanumGothic.ttf'
    
    
    def upload_to_gcs(bucket_name, destination_blob_name, data):
        #import pdb; pdb.set_trace()
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(destination_blob_name)
        blob.upload_from_string(data, content_type='application/json')
    
    def download_from_gcs(bucket_name, source_blob_name):
        #import pdb; pdb.set_trace()
        bucket = storage_client.bucket(bucket_name)
        blob = bucket.blob(source_blob_name)
        return blob.download_as_string()
    
    def init_file_in_gcs(bucket_name, blob_name, initial_data):
        try:
            download_from_gcs(bucket_name, blob_name)
        except:
            upload_to_gcs(bucket_name, blob_name, json.dumps(initial_data, ensure_ascii=False, indent=4))
    
    init_file_in_gcs(bucket_name, 'data.json', [])
    init_file_in_gcs(bucket_name, 'users.json', [])
    init_file_in_gcs(bucket_name, 'voc.json', [])
    init_file_in_gcs(bucket_name, 'categories.json', {'categories': []})
    
    
    class User(UserMixin):
       def __init__(self, id):
           self.id = id
           self.password_hash = None
    
    
       @staticmethod
       def get(user_id):
           users = json.loads(download_from_gcs(bucket_name, 'users.json').decode('utf-8'))
           user = next((u for u in users if u['id'] == user_id), None)
           if user:
               user_obj = User(user['id'])
               user_obj.password_hash = user['password']
               return user_obj
           return None
    
    
       def set_password(self, password):
           self.password_hash = generate_password_hash(password)
    
    
       def check_password(self, password):
           return check_password_hash(self.password_hash, password)
    
    
    @login_manager.user_loader
    def load_user(user_id):
       return User.get(user_id)
    
    
    def autopct_format(values):
       def my_format(pct):
           total = sum(values)
           val = int(round(pct*total/100.0))
           return f'{pct:.1f}%\n({val:d})'
       return my_format
    
    
    def generate_category_pie_chart(data, main_selected ='', sub_selected=''):
        category_count = {}
        # import pdb; pdb.set_trace()
        if not main_selected:
            for question in data:
                if 'Category' in question and 'main' in question['Category']:
                    category = question['Category']['main'] if question['Category']['main'] else '미분류'
                    if category in category_count:
                        category_count[category] += 1
                    else:
                        category_count[category] = 1
        else:
            main_selected_data = [item for item in data if item["Category"]["main"] == main_selected]
            if not sub_selected:
                for question in main_selected_data:
                    if 'Category' in question and 'sub' in question['Category']:
                        category = question['Category']['sub'] if question['Category']['sub'] else '미분류'
                        if category in category_count:
                            category_count[category] += 1
                        else:
                            category_count[category] = 1
            else:
                sub_selected_data = [item for item in data if item["Category"]["sub"] == sub_selected]
                for question in sub_selected_data:
                    if 'Category' in question and 'minor' in question['Category']:
                        category = question['Category']['minor'] if question['Category']['minor'] else '미분류'
                        if category in category_count:
                            category_count[category] += 1
                        else:
                            category_count[category] = 1
    
    
    
        labels = list(category_count.keys())
        sizes = list(category_count.values())
    
        fontprop = fm.FontProperties(fname=FONT_PATH, size=12)
    
        plt.figure(figsize=(6, 6))
        plt.pie(sizes, labels=labels, autopct=autopct_format(sizes), startangle=140)
    
        # 라벨에 폰트 적용
        for label in plt.gca().texts:
            label.set_fontproperties(fontprop)
    
        plt.tight_layout()
        img = BytesIO()
        plt.savefig(img, format='png')
        img.seek(0)
        img_base64 = base64.b64encode(img.getvalue()).decode()
        plt.close()
        return img_base64
    
    @app.route('/updateChart', methods=['GET'])
    @login_required
    def updateChart():
        # import pdb; pdb.set_trace()
        data = json.loads(download_from_gcs(bucket_name, 'data.json').decode('utf-8'))
        main_selected = request.args.get('mainCategory', 1)
        sub_selected = request.args.get('subCategory', 1)
        chart_base64 = generate_category_pie_chart(data, main_selected, sub_selected)
        return chart_base64
    
    
    
    @app.route('/')
    @login_required
    def index():
        data = json.loads(download_from_gcs(bucket_name, 'data.json').decode('utf-8'))
        if current_user.id == 'admin':
            user_questions = data
        else:
            user_questions = [q for q in data if q['SubmitterID'] == current_user.id]
    
        last_type = request.cookies.get('last_type')
        last_category = {
            'main': request.cookies.get('last_main_category', ''),
            'sub': request.cookies.get('last_sub_category', ''),
            'minor': request.cookies.get('last_minor_category', '')
        }
        last_tags = request.cookies.get('last_tags')
        last_source = request.cookies.get('last_source', '')
    
        for question in user_questions:
            if 'Source' not in question:
                question['Source'] = '출처 없음'
            if 'SubmissionTime' not in question:
                question['SubmissionTime'] = 'N/A'
            if 'LastModifiedTime' not in question or not question['LastModifiedTime']:
                question['LastModifiedTime'] = '수정되지 않음'
    
        chart_base64 = generate_category_pie_chart(data)  # 전체 문제 데이터 사용
        return render_template('index.html', questions=user_questions, user=current_user, last_type=last_type, last_category=last_category, last_tags=last_tags, last_source=last_source, chart_base64=chart_base64, total_questions=len(data))
    
    
    
    
    
    @app.route('/register', methods=['GET', 'POST'])
    def register():
       if request.method == 'POST':
           user_id = request.form['user_id']
           password = request.form['password']
           user = User.get(user_id)
           if user is not None:
               flash('User ID already exists.', 'error')
           else:
               user = User(user_id)
               user.set_password(password)
               users = json.loads(download_from_gcs(bucket_name, 'users.json').decode('utf-8'))
               users.append({'id': user_id, 'password': user.password_hash})
               upload_to_gcs(bucket_name, 'users.json', json.dumps(users, ensure_ascii=False, indent=4))
               flash('User registered successfully!', 'success')
               return redirect(url_for('login'))
       return render_template('register.html')
    
    
    @app.route('/login', methods=['GET', 'POST'])
    def login():
       #import pdb; pdb.set_trace()
       if request.method == 'POST':
           user_id = request.form['user_id']
           password = request.form['password']
           user = User.get(user_id)
           if user is None or not user.check_password(password):
               flash('Invalid user ID or password.', 'error')
           else:
               login_user(user)
               response = redirect(url_for('index'))
               response.set_cookie('last_type', '', expires=0)
               response.set_cookie('last_main_category', '', expires=0)
               response.set_cookie('last_sub_category', '', expires=0)
               response.set_cookie('last_minor_category', '', expires=0)
               response.set_cookie('last_tags', '', expires=0)
    
               return response
       return render_template('login.html')
    
    # @app.route('/login', methods=['GET', 'POST'])
    # def login():
    #     if request.method == 'POST':
    #         try:
    #             user_id = request.form['user_id']
    #             password = request.form['password']
    #             user = User.get(user_id)
    #             if user is None or not user.check_password(password):
    #                 flash('Invalid user ID or password.', 'error')
    #                 return redirect(url_for('login'))
    #             login_user(user)
    #             return redirect(url_for('index'))
    #         except Exception as e:
    #             flash(f'An error occurred: {str(e)}', 'error')
    #             return redirect(url_for('login'))
    #     return render_template('login.html')
    
    
    @app.route('/logout')
    @login_required
    def logout():
        logout_user()
        response = redirect(url_for('login'))
        response.set_cookie('last_type', '', expires=0)
        response.set_cookie('last_main_category', '', expires=0)
        response.set_cookie('last_sub_category', '', expires=0)
        response.set_cookie('last_minor_category', '', expires=0)
        response.set_cookie('last_tags', '', expires=0)
    
        return response
    
    
    from werkzeug.utils import secure_filename
    
    UPLOAD_FOLDER = '/tmp/image_data'
    if not os.path.exists(UPLOAD_FOLDER):
        os.makedirs(UPLOAD_FOLDER)
    
    def save_image(file, filename):
        if file:
            folder_path = os.path.join(app.config['UPLOAD_FOLDER'], str(filename.split('_')[-1].split('.')[0]))
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            filepath = os.path.join(folder_path, filename)
            file.save(filepath)
            return filepath
        return None
    
    @app.route('/submit', methods=['POST'])
    @login_required
    def submit_question():
        question_type = request.form['question_type']
        choices = []
    
        if question_type == 'multiple':
            question = request.form['mc_question']
            choices = request.form.getlist('mc_choices[]')
            answers = request.form.getlist('mc_answers[]')
        elif question_type == 'subjective':
            question = request.form['sub_question']
            answer = request.form['sub_answer']
            answers = [answer]
        elif question_type == 'fill_in_the_blank':
            question = request.form['fib_question']
            raw_answers = request.form.getlist('fib_answer[]')
            others = request.form.getlist('fib_others[]')
            answers = {f"Blank#{i + 1}": answer for i, answer in enumerate(raw_answers)}
            for i, other in enumerate(others):
                answers[f"other#{i + 1}"] = other  # Add each other choice with a unique key
    
        main_category = request.form['main_category']
        sub_category = request.form['sub_category']
        minor_category = request.form['minor_category']
        tags = request.form['tags']
        source = request.form['source']
    
    
    
        try:
            data = json.loads(download_from_gcs(bucket_name, 'data.json').decode('utf-8'))
    
            new_id = max([item['ID'] for item in data], default=0) + 1 if data else 1
    
            new_data = {
                'ID': new_id,
                'Type': question_type,
                'Question': question,
                'Choices': choices,
                'Answers': answers,
                'SubmitterID': current_user.id,
                'Category': {
                    'main': main_category,
                    'sub': sub_category,
                    'minor': minor_category
                },
                'Tags': tags,
                'Source': source,
                'SubmissionTime': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'LastModifiedTime': ''
            }
    
            data.append(new_data)
    
            upload_to_gcs(bucket_name, 'data.json', json.dumps(data, ensure_ascii=False, indent=4))
    
            flash('Question successfully submitted!', 'success')
            response = redirect(url_for('index'))
            response.set_cookie('last_type', question_type)
            response.set_cookie('last_main_category', main_category)
            response.set_cookie('last_sub_category', sub_category)
            response.set_cookie('last_minor_category', minor_category)
            response.set_cookie('last_tags', tags)
    
            return response
        except Exception as e:
            flash(f'An error occurred while submitting the question: {e}', 'error')
    
        return redirect(url_for('index'))
    
    
    
    @app.route('/edit/<int:question_id>', methods=['GET', 'POST'])
    @login_required
    def edit_question(question_id):
        data = json.loads(download_from_gcs(bucket_name, 'data.json').decode('utf-8'))
        
        # 기존 데이터를 찾음
        question = next((q for q in data if q['ID'] == question_id and (q['SubmitterID'] == current_user.id or current_user.id == 'admin')), None)
        
        if question is None:
            flash('Question not found or you do not have permission to edit it.', 'error')
            return redirect(url_for('index'))
        
        if request.method == 'POST':
            question_type = request.form['question_type']
            new_question = {}
            
            # 폼 데이터를 바탕으로 새로운 데이터를 생성
            if question_type == 'multiple':
                new_question = {
                    'Question': request.form['mc_question'],
                    'Choices': request.form.getlist('mc_choices[]'),
                    'Answers': request.form.getlist('mc_answers[]')
                }
            elif question_type == 'subjective':
                new_question = {
                    'Question': request.form['sub_question'],
                    'Answers': [request.form['sub_answer']],
                    'Choices': None
                }
            elif question_type == 'fill_in_the_blank':
                raw_answers = request.form.getlist('fib_answer[]')
                other_choices = request.form.getlist('fib_others[]')
                answers = {f"Blank#{i + 1}": answer for i, answer in enumerate(raw_answers)}
                for i, other in enumerate(other_choices):
                    answers[f"other#{i + 1}"] = other  # Add each other choice with a unique key
                
                new_question = {
                    'Question': request.form['fib_question'],
                    'Answers': answers,
                    'Choices': None
                }
            
            # 카테고리, 태그, 출처, 시간 정보 등을 설정
            new_question.update({
                'ID': question['ID'],  # 기존 ID 유지
                'Type': question_type,
                'SubmitterID': current_user.id,
                'Category': {
                    'main': request.form['main_category'],
                    'sub': request.form['sub_category'],
                    'minor': request.form['minor_category']
                },
                'Tags': request.form['tags'],
                'Source': request.form['source'],
                'SubmissionTime': question['SubmissionTime'],  # 기존 제출 시간 유지
                'LastModifiedTime': datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # 현재 시간으로 수정 시간 설정
            })
            
            # 기존 데이터를 덮어쓰지 않고 새로운 데이터를 생성하여 리스트에 저장
            data = [q if q['ID'] != question_id else new_question for q in data]
            
            # 데이터 파일에 저장
            upload_to_gcs(bucket_name, 'data.json', json.dumps(data, ensure_ascii=False, indent=4))
            
            flash('Question successfully updated!', 'success')
            return redirect(url_for('index'))
        
        return render_template('edit_question.html', question=question)
    
    
    
    
    
    
    
    
    import shutil
    
    @app.route('/delete/<int:question_id>', methods=['POST'])
    @login_required
    def delete_question(question_id):
        try:
            data = json.loads(download_from_gcs(bucket_name, 'data.json').decode('utf-8'))
            question = next((q for q in data if q['ID'] == question_id and (q['SubmitterID'] == current_user.id or current_user.id == 'admin')), None)
            if question:
                folder_path = os.path.join(app.config['UPLOAD_FOLDER'], str(question_id))
                if os.path.exists(folder_path):
                    shutil.rmtree(folder_path)
                data = [q for q in data if q['ID'] != question_id]
                upload_to_gcs(bucket_name, 'data.json', json.dumps(data, ensure_ascii=False, indent=4))
    
                flash('Question and associated images successfully deleted!', 'success')
            else:
                flash('Question not found or you do not have permission to delete it.', 'error')
        except Exception as e:
            flash(f'An error occurred while deleting the question: {e}', 'error')
        return redirect(url_for('index'))
    
    @app.route('/delete_image', methods=['POST'])
    @login_required
    def delete_image():
        try:
            data = request.get_json()
            question_id = data['question_id']
            image_type = data['image_type']
            filename_map = {
                'question_image': f'img_question_{question_id}.png',
                'answer_image': f'img_answer_{question_id}.png'
            }
            if 'choice_image_' in image_type:
                choice_num = image_type.split('_')[2]
                filename_map[image_type] = f'img_choice_{choice_num}_{question_id}.png'
            image_path = os.path.join(app.config['UPLOAD_FOLDER'], str(question_id), filename_map[image_type])
            if os.path.exists(image_path):
                os.remove(image_path)
            return jsonify(success=True)
        except Exception as e:
            return jsonify(success=False, error=str(e))
    
    
    
    @app.route('/submit_voc', methods=['POST'])
    @login_required
    def submit_voc():
       voc_type = request.form['voc_type']
       voc_content = request.form['voc_content']
    
    
       new_voc = {
           'Type': voc_type,
           'Content': voc_content,
           'SubmitterID': current_user.id
       }
    
    
       try:
           voc_data = json.loads(download_from_gcs(bucket_name, 'voc.json').decode('utf-8'))
          
           voc_data.append(new_voc)
          
           upload_to_gcs(bucket_name, 'voc.json', json.dumps(voc_data, ensure_ascii=False, indent=4))
    
    
           flash('VOC successfully submitted!', 'success')
       except Exception as e:
           flash(f'An error occurred while submitting the VOC: {e}', 'error')
      
       return redirect(url_for('index'))
    
    
    @app.route('/download_voc')
    @login_required
    def download_voc():
       return send_file(VOC_FILE, as_attachment=True)
    
    
    @app.route('/download')
    @login_required
    def download():
       return send_file(DATA_FILE, as_attachment=True)
    
    
    @app.route('/download_users')
    @login_required
    def download_users():
       if current_user.id == 'admin':
           return send_file(USERS_FILE, as_attachment=True)
       else:
           flash('You do not have permission to download this file.', 'error')
           return redirect(url_for('index'))
    
    
    @app.route('/download_categories')
    @login_required
    def download_categories():
       return send_file(CATEGORIES_FILE, as_attachment=True)
    
    
    @app.route('/categories', methods=['GET'])
    @login_required
    def get_categories():
       categories = json.loads(download_from_gcs(bucket_name, 'categories.json').decode('utf-8'))
       return jsonify(categories)
    
    
    @app.route('/manage_categories', methods=['GET', 'POST'])
    @login_required
    def manage_categories():
       if current_user.id != 'admin':
           flash('You do not have permission to manage categories.', 'error')
           return redirect(url_for('index'))
    
    
       if request.method == 'POST':
           categories_content = request.form['categories_content']
           try:
               categories = json.loads(categories_content)
               upload_to_gcs(bucket_name, 'categories.json', json.dumps(categories, ensure_ascii=False, indent=4))
               flash('Categories updated successfully!', 'success')
           except json.JSONDecodeError:
               flash('Invalid JSON format.', 'error')
      
       categories = json.loads(download_from_gcs(bucket_name, 'categories.json').decode('utf-8'))
       return render_template('manage_categories.html', categories=json.dumps(categories, ensure_ascii=False, indent=4))
    
    
    @app.route('/change_password', methods=['GET', 'POST'])
    @login_required
    def change_password():
       if request.method == 'POST':
           old_password = request.form['old_password']
           new_password = request.form['new_password']
           confirm_password = request.form['confirm_password']
    
    
           user = User.get(current_user.id)
    
    
           if not user.check_password(old_password):
               flash('Old password is incorrect.', 'error')
           elif new_password != confirm_password:
               flash('New passwords do not match.', 'error')
           else:
               user.set_password(new_password)
               users = json.loads(download_from_gcs(bucket_name, 'users.json').decode('utf-8'))
               for u in users:
                   if u['id'] == user.id:
                       u['password'] = user.password_hash
                       break
               upload_to_gcs(bucket_name, 'users.json', json.dumps(users, ensure_ascii=False, indent=4))
               flash('Password changed successfully!', 'success')
               return redirect(url_for('index'))
       return render_template('change_password.html')
    
    
    if __name__ == '__main__':
       app.run(debug=True, host='0.0.0.0', port=4444)

    app.yaml
    --------
    runtime: python310  # 또는 사용 중인 Python 버전
    
    entrypoint: gunicorn -w 2 -b :$PORT app:app
    
    handlers:
    - url: /static
      static_dir: static
    
    - url: /.*
      script: auto

    .bash_history
    -------------
    # test

    .gcloudignore
    -------------
    # This file specifies files that are *not* uploaded to Google Cloud
    # using gcloud. It follows the same syntax as .gitignore, with the addition of
    # "#!include" directives (which insert the entries of the given .gitignore-style
    # file at that point).
    #
    # For more information, run:
    #   $ gcloud topic gcloudignore
    #
    .gcloudignore
    # If you would like to upload your .git directory, .gitignore file or files
    # from your .gitignore file, remove the corresponding line
    # below:
    .git
    .gitignore
    google-cloud-sdk
    google-cloud-cli-478.0.0-linux-x86_64.tar.gz
    
    
    # Python pycache:
    __pycache__/
    # Ignored by the build system
    /setup.cfg

    __pycache__/
        app.cpython-310.pyc
        -------------------
        o
        
             zf
        S                     @   s  d dl mZmZmZmZmZmZmZmZ d dl	m
        Z
        m
        Z
        m
        Z
        m
        Z
        mZmZ d dlZd dlZd dlmZ d dlmZ d dlmZ d dlZd dlm
        Z
        m
        Z
         d dl
        m
        Z
         d dlm Z  dd	 Z!e! Z"d
        Z#ee$Z%d
        e%_&e
         Z'e'(e% d
        e'_)d
        Z*dZ+dZ,dZ-dZ.dd Z/dd Z0dd Z1e1e#d
        g  e1e#dg  e1e#dg  e1e#ddg i G dd de
        Z2e'j3dd
         Z4d
        d
         Z5d`d d!Z6e%j7d"d#gd$e
        d%d& Z8e%7d'e
        d(d) Z9e%j7d*d#d+gd$d,d- Z:e%j7d.d#d+gd$d/d
         Z;e%7d0e
        d1d2 Z<d d3l=m>Z> d4Z?ej@Ae?s
        eBe? d5d6 ZCe%j7d7d+gd$e
        d8d9 ZDe%j7d:d#d+gd$e
        d;d< ZEd dlFZFe%j7d=d+gd$e
        d>d? ZGe%j7d@d+gd$e
        dAdB ZHe%j7dCd+gd$e
        dDdE ZIe%7dFe
        dGdH ZJe%7dIe
        dJdK ZKe%7dLe
        dMdN ZLe%7dOe
        dPdQ ZMe%j7dRd#gd$e
        dSdT ZNe%j7dUd#d+gd$e
        dVdW ZOe%j7dXd#d+gd$e
        dYdZ ZPe$d[kre%jQd\d]d^d_ dS dS )a    )Flaskrender_templaterequestredirectflashurl_for	send_filejsonify)
        LoginManager	UserMixin
        login_userlogin_required
        logout_user
        current_userN)BytesIO)generate_password_hashcheck_password_hash)datetime)storagec                   C   s   t  S N)r   Client r   r   #/workspaces/codespaces-flask/app.pyinit_storage_client   s   r   Zguiroman_english_bucketZyour_secret_keylogin	data.json
        users.jsonvoc.jsoncategories.jsonztemplates/NanumGothic.ttfc                 C   s&   t | }||}|j|dd d S )Nzapplication/json)
        content_type)storage_clientbucketblobZupload_from_string)
        bucket_nameZdestination_blob_namedatar!   r"   r   r   r   
        upload_to_gcs%   s   
        
        r%   c                 C   s
           t | }||}| S r   )r    r!   r"   Zdownload_as_string)r#   Zsource_blob_namer!   r"   r   r   r   download_from_gcs+   s   
        
        r&   c              
           C   s6   zt | | W d S    t| |tj|ddd Y d S )NF   
        ensure_asciiindent)r&   r%   jsondumps)r#   Z	blob_nameZ
        initial_datar   r   r   init_file_in_gcs1   s   
        r-   
        categoriesc                   @   s0   e Zd Zdd Zedd Zdd Zdd Zd	S )
        Userc                 C   s   || _ d | _d S r   )id
        password_hash)selfr0   r   r   r   __init__>   s   
        z
        User.__init__c                    sP   t ttdd}t fdd|D d }|r&t|d }|d |_|S d S )Nr
           utf-8c                 3   s     | ]
        }|d   kr|V  qdS )r0   Nr   ).0uuser_idr   r   	<genexpr>F   s   
         zUser.get.<locals>.<genexpr>r0   password)r+   loadsr&   r#   decodenextr/   r1   )r8   usersuserZuser_objr   r7   r   getC   s   
        
        zUser.getc                 C   s   t || _d S r   )r   r1   r2   r:   r   r   r   
        set_passwordN   s   zUser.set_passwordc                 C   s
           t | j|S r   )r   r1   rA   r   r   r   check_passwordR   s   
        zUser.check_passwordN)__name__
        __module__
        __qualname__r3   
        staticmethodr@   rB   rC   r   r   r   r   r/   =   s
            
        
        
        r/   c                 C   s
           t | S r   )r/   r@   r7   r   r   r   	load_userV   s   
        rH   c                    s    fdd}|S )Nc                    s0   t  }tt| | d }| dd|ddS )Ng      Y@z.1fz%
        (d))sumintround)Zpcttotalvalvaluesr   r   	my_format\   s   z!autopct_format.<locals>.my_formatr   )rQ   rR   r   rP   r   autopct_format[   s   
        rS    c                    s  i } s3| D ]+}d|v r1d|d v r1|d d r
        |d d nd}||v r-||  d7  < qd||< qnq fdd| D }sm|D ]+}d|v rkd|d v rk|d d rX|d d nd}||v rg||  d7  < q@d||< q@n7fdd| D }|D ]+}d|v rd	|d v r|d d	 r|d d	 nd}||v r||  d7  < qxd||< qxt | }t | }	tjtd
        d
        }
        tjd
        d
         tj|	|t	|	dd t
         j
        D ]}
        |
        
        |
         qt
          t }
        tj|
        dd |
        d t|
          }
        t  |
        S )NCategorymainu	   미분류   c                        g | ]
        }|d  d  kr|qS )rU   rV   r   r5   item)
        main_selectedr   r   
        <listcomp>o        z/generate_category_pie_chart.<locals>.<listcomp>subc                    rX   )rU   r^   r   rY   )
        sub_selectedr   r   r\   y   r]   minor
           )fnamesize)   rd   )Zfigsize   )labelsZautopctZ
        startangleZpng)formatr   )listkeysrQ   fmZFontProperties	FONT_PATHpltZfigureZpierS   ZgcaZtextsZset_fontpropertiesZ
        tight_layoutr   Zsavefigseekbase64	b64encodegetvaluer<   close)r$   r[   r_   Zcategory_countquestioncategoryZmain_selected_dataZsub_selected_datarf   ZsizesZfontproplabelZimgZ
        img_base64r   )r[   r_   r   generate_category_pie_chartc   sT   
        
        
        
        
        
        
        
        ru   z
        /updateChartGET)methodsc                  C   sB   t ttdd} tjdd}tjdd}t| ||}|S )Nr   r4   Z
        mainCategoryrW   Z
        subCategory)	r+   r;   r&   r#   r<   r   argsr@   ru   )r$   r[   r_   
        chart_base64r   r   r   
        updateChart   s
           
        rz   /c               
           C   s   t ttdd} tjdkr| }ndd | D }tj	d}tj	ddtj	d	dtj	d
        dd
        }tj	d
        }tj	d
        d}|D ]
        }d|vrNd|d< d|vrVd|d< d|vs^|d sbd|d< qDt
        | }t
        d|t|||||t
        | d	S )Nr   r4   adminc                 S   s
           g | ]
        }|d  t jkr|qS )
        SubmitterIDr   r0   r5   qr   r   r   r\      s   
         zindex.<locals>.<listcomp>	last_typelast_main_categoryrT   last_sub_categorylast_minor_categoryrV   r^   r`   	last_tags
        last_sourceSourceu
           출처 없음SubmissionTimezN/ALastModifiedTimeu   수정되지 않음z
        index.html)Z	questionsr?   r   
        last_categoryr   r   ry   Ztotal_questions)
        r+   r;   r&   r#   r<   r   r0   r   cookiesr@   ru   r   len)r$   Zuser_questionsr   r   r   r   rr   ry   r   r   r   index   s*   
        
        
        
        
        
        
        r   z	/registerPOSTc                  C   s   t jdkrUt jd } t jd }t| }|d ur!tdd tdS t| }|| tt	t
        d
        d}|
        | |j
        d tt
        dtj|d	d
        d
         td
        d
         ttdS tdS )Nr   r8   r:   zUser ID already exists.errorr
           r4   )r0   r:   Fr'   r(   z
        User registered successfully!successr   z
        register.html)r   methodformr/   r@   r   rB   r+   r;   r&   r#   r<   appendr1   r%   r,   r   r   r   )r8   r:   r?   r>   r   r   r   register   s
           
        
        
        
        
        	
        
        
        r   z/loginc                  C   s   t jdkrZt jd } t jd }t| }|d u s
        ||s&tdd t
        dS t| tt	d}|j
        ddd	d
         |j
        d
        dd	d
         |j
        d
        dd	d
         |j
        d
        dd	d
         |j
        ddd	d
         |S t
        dS )Nr   r8   r:   z
        Invalid user ID or password.r   r   r   rT   r   expiresr   r   r   r   z
        login.html)
        r   r   r   r/   r@   rC   r   r
           r   r   
        set_cookier   )r8   r:   r?   responser   r   r   r      s    
        
        
        
        
        
        
        z/logoutc                  C   sf   t   ttd} | jdddd | jdddd | jdddd | jdddd | jd	ddd | S )
        Nr   r   rT   r   r   r   r   r   r   )r   r   r   r   )r   r   r   r   logout   s   
        r   )secure_filenamez/tmp/image_datac                 C   sf   | r1t jtjd t|dd dd }t j|s#t | t j||}| 	| |S d S )N
        UPLOAD_FOLDER_.r   )
        ospathjoinappconfigstrsplitexistsmakedirssave)filefilename
        folder_pathfilepathr   r   r   
        save_image  s   ,
        
        
        r   z/submitc               
           C   s  t jd } g }| dkr
        t jd }t jd}t jd}nB| dkr/t jd }t jd }|g}n0| d	kr_t jd
         }t jd
        }t jd
        }d
        d t|D }t|D ]
        \}}||d|d  < qQt jd }	t jd }
        t jd }
        t jd }
        t jd }
        zqtttdd}|rt	dd |D ddd nd}|| |||t
        j
        |	|
        |
        d
        |
        |
        t
        
         d
        d
        d
        }|| ttdtj|d d!d" td#d$ ttd%}|d&|  |d'|	 |d(|
         |d)|
         |d*|
         |W S  ty } ztd+| d, W Y d }~nd }~ww ttd%S )-N
        question_typemultiple
        mc_question
        mc_choices[]
        mc_answers[]
        subjective
        sub_question
        sub_answerfill_in_the_blank
        fib_question
        fib_answer[]
        fib_others[]c                 S       i | ]
        \}}d |d  |qS zBlank#rW   r   r5   ianswerr   r   r   
        <dictcomp>/  r]   z#submit_question.<locals>.<dictcomp>other#rW   
        main_category
        sub_categoryminor_categorytagssourcer   r4   c                 S   s   g | ]}|d  qS IDr   rY   r   r   r   r\   >  s    z#submit_question.<locals>.<listcomp>r   )defaultr   %Y-%m-%d %H:%M:%SrT   )
        r   TypeQuestionChoicesAnswersr}   rU   Tagsr   r   r   Fr'   r(   z Question successfully submitted!r   r   r   r   r   r   r   z1An error occurred while submitting the question: r   )r   r   getlist	enumerater+   r;   r&   r#   r<   maxr   r0   r   nowstrftimer   r%   r,   r   r   r   r   	Exception)r   choicesrr   answersr   
        raw_answersZothersr   otherr   r   r   r   r   r$   Znew_idZnew_datar   er   r   r   submit_question
          sn   
        
        
        
        
        
        
        
        
        
        
        
        
        "
        
        
        
        
        
        
        
        
        
        
        r   z/edit/<int:question_id>c           	   
              s  t ttdd}tfdd|D d }|d u r&tdd ttdS t	j
        dkrt	j
        d	 }i  |d
        krHt	j
        d
         t	j
        
        d
        t	j
        
        d
        d nF|dkrZt	j
        d t	j
        d gd d n4|dkrt	j
        
        d}t	j
        
        d}dd t
        |D }t
        |D ]
        \}}||d|d  < qwt	j
        d |d d  |d |tjt	j
        d
         t	j
        d
         t	j
        d
         dt	j
        d  t	j
        d! |d" t d#d$  fd%d&|D }ttdt j|d'd(d) td*d+ ttdS td,|d-S ).Nr   r4   c                 3   8    | ]}|d   kr|d t jkst jdkr|V  qdS r   r}   r|   Nr~   r   
        question_idr   r   r9   l     6 z edit_question.<locals>.<genexpr>z<Question not found or you do not have permission to edit it.r   r   r   r   r   r   r   r   )r   r   r   r   r   r   )r   r   r   r   r   r   c                 S   r   r   r   r   r   r   r   r     r]   z!edit_question.<locals>.<dictcomp>r   rW   r   r   r   r   r   r   r   r   r   r   )r   r   r}   rU   r   r   r   r   c                    s    g | ]
        }|d  kr
        |n qS r   r   r   Z
        new_questionr   r   r   r\     r]   z!edit_question.<locals>.<listcomp>Fr'   r(   z
        Question successfully updated!r   zedit_question.html)rr   )r+   r;   r&   r#   r<   r=   r   r   r   r   r   r   r   r   updater   r0   r   r   r   r%   r,   r   )	r   r$   rr   r   r   Z
        other_choicesr   r   r   r   r   r   
        edit_questionf  s\   
        
        
        
        
        
        
        
        
        
        
        
        
        r   z/delete/<int:question_id>c              
              s   zRt ttdd}t fdd|D d }|rLtjt	j
        d t
         }tj
        |r1t
        |  fdd|D }ttdt j|dd	d
         td
        d
         ntd
        d W n tyl } ztd| d W Y d }~nd }~ww ttdS )Nr   r4   c                 3   r   r   r~   r   r   r   r   r9     r   z"delete_question.<locals>.<genexpr>r   c                    s
           g | ]
        }|d   kr|qS r   r   r   r   r   r   r\     s   
         z#delete_question.<locals>.<listcomp>Fr'   r(   z4Question and associated images successfully deleted!r   z>Question not found or you do not have permission to delete it.r   z/An error occurred while deleting the question: r   )r+   r;   r&   r#   r<   r=   r   r   r   r   r   r   r   shutilrmtreer%   r,   r   r   r   r   )r   r$   rr   r   r   r   r   r   delete_question  s"   
        
        
        
        
        
        r   z
        /delete_imagec               
           C   s   zOt  } | d }| d }d| dd| dd}d|v r0|dd	 }d
        | d| d||< tjtjd
         t||| }tj	|rJt
        | t
        d
        d
        W S  t
        yi } zt
        dt|dW  Y d }~S d }~ww )Nr   
        image_typeZ
        img_question_z.pngZ
        img_answer_)Zquestion_imageZ
        answer_imageZ
        choice_image_r      Z
        img_choice_r   T)r   F)r   r   )
        r   get_jsonr   r   r   r   r   r   r   r   remover	   r   )r$   r   r   Z
        filename_mapZ
        choice_numZ
        image_pathr   r   r   r   
        delete_image  s$   
        
        
        
        
        
        
        r   z
        /submit_vocc               
           C   s   t jd } t jd }| |tjd}z#tttdd}|	| t
        tdtj
        |ddd t
        d	d
         W n t
        yN } zt
        d
        | d
         W Y d }~nd }~ww ttd
        S )Nvoc_type
        voc_content)r   ZContentr}   r
           r4   Fr'   r(   zVOC successfully submitted!r   z,An error occurred while submitting the VOC: r   r   )r   r   r   r0   r+   r;   r&   r#   r<   r   r%   r,   r   r   r   r   )r   r   Znew_vocZvoc_datar   r   r   r   
        submit_voc  s    
        
        
        
        
        r   z
        /download_vocc                   C   
           t tddS NT
        as_attachment)r   VOC_FILEr   r   r   r   
        download_voc     
        r   z	/downloadc                   C   r   r   )r   	DATA_FILEr   r   r   r   download  r   r   z/download_usersc                   C   s,   t jdkr
        ttddS tdd ttdS )Nr|   Tr   z1You do not have permission to download this file.r   r   )r   r0   r   
        USERS_FILEr   r   r   r   r   r   r   download_users  s   
        
        
        
        r   z/download_categoriesc                   C   r   r   )r   CATEGORIES_FILEr   r   r   r   download_categories  r   r   z
        /categoriesc                  C   s
           t ttdd} t| S )Nr
           r4   )r+   r;   r&   r#   r<   r	   r.   r   r   r   get_categories  s   r   z/manage_categoriesc                  C   s   t jdkrtdd ttdS tjdkrBtjd } zt	| }t
        t
        dtj
        |dd	d
         td
        d
         W n tj
        yA   td
        d Y nw t	tt
        dd}tdtj
        |dd	d
        dS )Nr|   z0You do not have permission to manage categories.r   r   r   categories_contentr
           Fr'   r(   z Categories updated successfully!r   zInvalid JSON format.r4   zmanage_categories.htmlr   )r   r0   r   r   r   r   r   r   r+   r;   r%   r#   r,   JSONDecodeErrorr&   r<   r   )r   r.   r   r   r   manage_categories  s
           
        
        
        
        
        
        r   z/change_passwordc                  C   s   t jdkrot jd } t jd }t jd }ttj}|| s(tdd tdS ||kr5tdd tdS |	| t
        
        t
        t
        dd	}|D ]}|d
         |jkrW|j|d
        <  nqGtt
        dt
        j|d
        d
        d tdd ttdS tdS )Nr   
        old_password
        new_passwordconfirm_passwordzOld password is incorrect.r   zNew passwords do not match.r
           r4   r0   r:   Fr'   r(   z
        Password changed successfully!r   r   zchange_password.html)r   r   r   r/   r@   r   r0   rC   r   rB   r+   r;   r&   r#   r<   r1   r%   r,   r   r   r   )r  r  r  r?   r>   r6   r   r   r   change_password4  s,   
        
        
        
        
        
        
        
        
        
        
        
        
        
        r  __main__Tz0.0.0.0i\  )debughostport)rT   rT   )Rflaskr   r   r   r   r   r   r   r	   Z
        flask_loginr
           r
           r
           r
           r   r   r+   r   Zmatplotlib.pyplotZpyplotrl   Zmatplotlib.font_managerZ
        font_managerrj   ior   rn   Zwerkzeug.securityr   r   r   Z
        google.cloudr   r   r    r#   rD   r   
        secret_keyZ
        login_managerZinit_appZ
        login_viewr   r   r   r   rk   r%   r&   r-   r/   Z
        user_loaderrH   rS   ru   routerz   r   r   r   r   Zwerkzeug.utilsr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r  runr   r   r   r   <module>   s   (  
        
        
        
        
        
        
        
        
        
        
        5
        
        
        
        
        &
        
        
        
        
        
        G
        J
        
        
        
        
        
        
        
        
        
        
        

    templates/
        manage_categories.html
        ----------------------
        <!DOCTYPE html>
        <html lang="ko">
        <head>
           <meta charset="UTF-8">
           <title>분류 관리</title>
           <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
           <style>
               .button-group {
                   display: flex;
                   justify-content: space-between;
                   margin-top: 10px;
               }
               .button-group button,
               .button-group input[type="submit"] {
                   flex: 1;
                   margin-right: 10px;
               }
               .button-group button:last-child {
                   margin-right: 0;
               }
           </style>
        </head>
        <body>
           <div class="form-container">
               <h1>SSAT 출제 시스템</h1>
               <h1>분류 관리</h1>
        
        
               {% with messages = get_flashed_messages(with_categories=true) %}
                   {% if messages %}
                       <ul class="flashes">
                           {% for category, message in messages %}
                               <li class="{{ category }}">{{ message }}</li>
                           {% endfor %}
                       </ul>
                   {% endif %}
               {% endwith %}
        
        
               <form action="{{ url_for('manage_categories') }}" method="POST">
                   <label>분류 JSON:</label><br>
                   <textarea name="categories_content" rows="20" style="width: 100%;">{{ categories }}</textarea><br>
                   <div class="button-group">
                       <input type="submit" value="저장">
                       <button type="button" onclick="window.location.href='{{ url_for('index') }}'">나가기</button>
                   </div>
               </form>
               <a href="{{ url_for('download_categories') }}" class="download-btn">분류 JSON 다운로드</a>
           </div>
        </body>
        </html>

        edit_question.html
        ------------------
        <!DOCTYPE html>
        <html lang="ko">
        
        <head>
            <meta charset="UTF-8">
            <title>문제 수정</title>
            <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
            <style>
                .form-container {
                    max-width: 800px;
                    margin: 20px auto;
                    padding: 20px;
                    border: 1px solid #ccc;
                    border-radius: 5px;
                    background-color: #fff;
                }
            </style>
            <script>
                function showForm() {
                    const type = document.querySelector('input[name="question_type"]:checked').value;
                    const multipleChoice = document.getElementById('multiple_choice');
                    const subjective = document.getElementById('subjective');
                    const fillInTheBlank = document.getElementById('fill_in_the_blank');
        
                    multipleChoice.style.display = type === 'multiple' ? 'block' : 'none';
                    subjective.style.display = type === 'subjective' ? 'block' : 'none';
                    fillInTheBlank.style.display = type === 'fill_in_the_blank' ? 'block' : 'none';
        
                    // if(type === 'fill_in_the_blank'){
                    //     resetBlanks()
                    //     generateAnswerFields()
                    // }
        
                    document.getElementsByName('mc_question')[0].disabled = type !== 'multiple';
                    document.getElementsByName('mc_choices[]').forEach(field => field.disabled = type !== 'multiple');
                    document.getElementsByName('mc_answers[]').forEach(field => field.disabled = type !== 'multiple');
                    document.getElementsByName('sub_question')[0].disabled = type !== 'subjective';
                    document.getElementsByName('sub_answer')[0].disabled = type !== 'subjective';
                    document.getElementsByName('fib_question')[0].disabled = type !== 'fill_in_the_blank';
                    document.getElementsByName('fib_answer[]').forEach(field => field.disabled = type !== 'fill_in_the_blank');
                }
        
                let originalBlanks = [];
                let previousAnswers = [];
                let initialQuestion = '';
        
                function generateAnswerFields() {
                    const textarea = document.getElementsByName('fib_question')[0];
                    const question = textarea.value;
                    const blankMatches = question.match(/{\s*}/g) || [];
                    const blanks = blankMatches.map(blank => blank.length - 2); // 원래 공백 수 저장
                    const answerDiv = document.querySelector('#fib_answers');
        
                    // 기존 매핑을 저장
                    const existingAnswers = Array.from(document.getElementsByName('fib_answer[]')).map(input => input.value);
                    // 매핑을 유지하며 삭제된 blank에 대응하는 정답 제거
                    previousAnswers = previousAnswers.filter((_, index) => index < blanks.length);
        
                    if (answerDiv) {
                        answerDiv.innerHTML = '';
                        let updatedQuestion = question;
                        let currentAnswerIndex = 0;
        
                        for (let i = 0; i < blanks.length; i++) {
                            const label = document.createElement('label');
                            label.innerText = `Blank#${i + 1}: `;
                            const input = document.createElement('input');
                            input.type = 'text';
                            input.name = 'fib_answer[]';
                            input.required = true;
                            if (previousAnswers[currentAnswerIndex] !== undefined) {
                                input.value = previousAnswers[currentAnswerIndex];
                            } else if (existingAnswers[currentAnswerIndex] !== undefined) {
                                input.value = existingAnswers[currentAnswerIndex];
                            }
                            currentAnswerIndex++;
                            answerDiv.appendChild(label);
                            answerDiv.appendChild(input);
                            answerDiv.appendChild(document.createElement('br'));
        
                            updatedQuestion = updatedQuestion.replace(/{\s*}/, `{Blank#${i + 1}}`);
                        }
        
                        originalBlanks = blanks;
                        initialQuestion = updatedQuestion;
                        textarea.value = updatedQuestion;
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = true; // 버튼 비활성화
        
                
                    } else {
                        console.error("Element with id 'fib_answers' not found.");
                    }
                }
        
                function resetBlanks() {
                    const textarea = document.getElementsByName('fib_question')[0];
                    const blankMatches = textarea.value.match(/{\s*Blank#\d+\s*}|{\s*}/g) || [];
        
                    if (blankMatches.length === 0) {
                        // 빈칸이 하나도 없는 경우 버튼 비활성화
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = true;
                    } else {
                        // 빈칸이 하나라도 있는 경우 버튼 활성화
                        textarea.value = textarea.value.replace(/{\s*Blank#\d+\s*}|{\s*}/g, (match) => {
                            let blankCount;
                            if (match.includes('Blank#')) {
                                const blankNumber = parseInt(match.match(/\d+/)[0], 10) - 1;
                                blankCount = originalBlanks[blankNumber];
                            } else {
                                blankCount = match.length - 2; // 중괄호를 제외한 공백 수
                            }
                            return `{${' '.repeat(blankCount)}}`;
                        });
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = false; // 버튼 활성화
                    }
                }
        
        
                function enableGenerateButton() {
                    const textarea = document.getElementsByName('fib_question')[0];
                    if (textarea.value === initialQuestion) {
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = true;
                    } else {
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = false;
                    }
                }
        
                function updateAnswerOptions() {
                    const choices = document.getElementsByName('mc_choices[]');
                    const answerDiv = document.getElementById('mc_answers');
                    answerDiv.innerHTML = '<h4>정답</h4>';
        
        
                    choices.forEach((choice, index) => {
                        if (choice.value.trim() !== '') {
                            const label = document.createElement('label');
                            label.style.marginRight = '10px';
                            label.innerHTML = `<input type="checkbox" name="mc_answers[]" value="${index + 1}"> ${index + 1}`;
                            answerDiv.appendChild(label);
                        }
                    });
                }
        
                function isChecked(value) {
                    let answers = {{ question.Answers | default([]) | tojson }};
                    if (answers.length === 0 && '{{ question.Answer }}' !== '') {
                        answers = ['{{ question.Answer }}'];
                    }
                    return answers.includes(value.toString()) ? 'checked' : '';
                }
        
                function addChoice() {
                    const otherChoicesDiv = document.getElementById('other_choices');
                    const newChoice = document.createElement('div');
                    newChoice.innerHTML = `<textarea name="fib_others[]" rows="2"></textarea>`;
                    otherChoicesDiv.appendChild(newChoice);
                }
        
                function removeChoice() {
                    const otherChoicesDiv = document.getElementById('other_choices');
                    const choices = otherChoicesDiv.getElementsByTagName('div');
                    if (choices.length > 1) {
                        otherChoicesDiv.removeChild(choices[choices.length - 1]);
                    }
                }
        
                function loadCategories() {
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const mainCategorySelect = document.getElementById('main_category');
                            mainCategorySelect.innerHTML = '<option value="">대분류 선택</option>';
                            data.categories.forEach(category => {
                                const option = document.createElement('option');
                                option.value = category.name;
                                option.text = category.name;
                                mainCategorySelect.appendChild(option);
                            });
        
                            const category = {
                                main: "{{ question.Category.main if question.Category else '' }}",
                                sub: "{{ question.Category.sub if question.Category else '' }}",
                                minor: "{{ question.Category.minor if question.Category else '' }}"
                            };
                            if (category.main) {
                                mainCategorySelect.value = category.main;
                                updateSubcategories(() => {
                                    const subCategorySelect = document.getElementById('sub_category');
                                    if (category.sub) {
                                        subCategorySelect.value = category.sub;
                                        updateMinorCategories(() => {
                                            const minorCategorySelect = document.getElementById('minor_category');
                                            if (category.minor) {
                                                minorCategorySelect.value = category.minor;
                                            }
                                        });
                                    }
                                });
                            }
                        });
                }
        
                function updateSubcategories(callback) {
                    const mainCategory = document.getElementById('main_category').value;
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const subCategorySelect = document.getElementById('sub_category');
                            subCategorySelect.innerHTML = '<option value="">중분류 선택</option>';
                            const minorCategorySelect = document.getElementById('minor_category');
                            minorCategorySelect.innerHTML = '<option value="">소분류 선택</option>';
                            const category = data.categories.find(category => category.name === mainCategory);
                            if (category) {
                                category.subcategories.forEach(subcategory => {
                                    const option = document.createElement('option');
                                    option.value = subcategory.name;
                                    option.text = subcategory.name;
                                    subCategorySelect.appendChild(option);
                                });
                            }
                            if (callback) callback();
                        });
                }
        
                function updateMinorCategories(callback) {
                    const mainCategory = document.getElementById('main_category').value;
                    const subCategory = document.getElementById('sub_category').value;
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const minorCategorySelect = document.getElementById('minor_category');
                            minorCategorySelect.innerHTML = '<option value="">소분류 선택</option>';
                            const category = data.categories.find(category => category.name === mainCategory);
                            if (category) {
                                const subcategory = category.subcategories.find(sub => sub.name === subCategory);
                                if (subcategory) {
                                    subcategory.subcategories.forEach(minor => {
                                        const option = document.createElement('option');
                                        option.value = minor.name;
                                        option.text = minor.name;
                                        minorCategorySelect.appendChild(option);
                                    });
                                }
                            }
                            if (callback) callback();
                        });
                }
        
                function validateForm(event) {
                    const questionType = document.querySelector('input[name="question_type"]:checked').value;
                    if (questionType === 'multiple') {
                        const answers = document.querySelectorAll('input[name="mc_answers[]"]:checked');
                        if (answers.length === 0) {
                            event.preventDefault();
                            alert('객관식 문제의 경우, 적어도 하나의 정답을 선택해야 합니다.');
                        }
                    }
                }
        
                document.addEventListener('DOMContentLoaded', () => {
                    window.question = {{ question | tojson | safe }};
                    initialQuestion = document.getElementsByName('fib_question')[0].value
                    enableGenerateButton()
                    loadCategories();
                    document.getElementById('main_category').addEventListener('change', () => updateSubcategories());
                    document.getElementById('sub_category').addEventListener('change', () => updateMinorCategories());
                    updateAnswerOptions();
                    showForm();
                    const textarea = document.getElementsByName('fib_question')[0];
                    textarea.addEventListener('focus', resetBlanks);
                    textarea.addEventListener('input', enableGenerateButton);
                    document.querySelector('form').addEventListener('submit', validateForm);
                });
            </script>
        </head>
        
        <body>
            <h1 id="main-title">SSAT 출제 시스템</h1>
            <h1>문제 수정</h1>
        
            <div class="form-container">
                <form action="/edit/{{ question.ID }}" method="POST">
                    <label>
                        <input type="radio" name="question_type" value="multiple" onclick="showForm()" {% if
                            question.Type=='multiple' %}checked{% endif %}> 객관식
                    </label>
                    <label>
                        <input type="radio" name="question_type" value="subjective" onclick="showForm()" {% if
                            question.Type=='subjective' %}checked{% endif %}> 주관식
                    </label>
                    <label>
                        <input type="radio" name="question_type" value="fill_in_the_blank" onclick="showForm()" {% if
                            question.Type=='fill_in_the_blank' %}checked{% endif %}> 빈칸 채우기
                    </label>
        
                    <div id="multiple_choice"
                        style="display: {% if question.Type == 'multiple' %}block{% else %}none{% endif %};">
                        <h3>객관식 문제</h3>
                        <label>문제: <textarea name="mc_question" rows="3" required>{{ question.Question }}</textarea></label><br>
                        <div id="choices">
                            {% if question.Choices %}
                            {% for choice in question.Choices %}
                            <div><label>{{ loop.index }}. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                        required>{{ choice }}</textarea></label><br></div>
                            {% endfor %}
                            {% else %}
                            <div><label>1. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                        required></textarea></label><br></div>
                            <div><label>2. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                        required></textarea></label><br></div>
                            <div><label>3. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                        required></textarea></label><br></div>
                            <div><label>4. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                        required></textarea></label><br></div>
                            {% endif %}
                        </div>
                        <button type="button" onclick="addChoice()">보기 추가</button>
                        <button type="button" onclick="removeChoice()">보기 제거</button><br>
                        <div id="mc_answers">
                            <h4>정답</h4>
                        </div>
                    </div>
        
                    <div id="subjective" style="display: {% if question.Type == 'subjective' %}block{% else %}none{% endif %};">
                        <h3>주관식 문제</h3>
                        <label>문제: <textarea name="sub_question" rows="3"
                                required>{{ question.Question }}</textarea></label><br>
                        <label>정답: <textarea name="sub_answer" rows="3"
                                required>{{ question.Answers[0] if question.Answers else question.Answer }}</textarea></label><br>
                    </div>
        
                    <div id="fill_in_the_blank"
                        style="display: {% if question.Type == 'fill_in_the_blank' %}block{% else %}none{% endif %};">
                        <h3>빈칸 채우기 문제</h3>
                        <label>문제: (작성예: 한국의 수도는{ }이고, 미국의 수도는 { }이다.)<textarea name="fib_question" rows="3"
                                required>{{ question.Question }}</textarea></label><br>
                        <button type="button" onclick="generateAnswerFields()">정답 입력</button><br><br>
                        
                        <div id="fib_answers">
                            {% if question.Type == 'fill_in_the_blank' %}
                                {% for key, value in question.Answers.items() %}
                                    {% if key.startswith('Blank#') %}
                                            <label>{{ key }}</label>
                                            <input name="fib_answer[]" type="text" value="{{value}}" required>
                                    {% endif %}
                                {% endfor %}
                            {% endif %}
                        </div>
                        <div id="other_choices">
                            <h4>오답 보기 추가 (선택)</h4>
                            {% if question.Type == 'fill_in_the_blank' %}
                            {% for key, value in question.Answers.items() %}
                                {% if key.startswith('other#') %}
                                    <div>
                                        <textarea name="fib_others[]" rows="2">{{ value }}</textarea>
                                    </div> 
                                {% endif %}
                            {% endfor %}
                            {% endif %}
                        </div>
                        
                        <button type="button" onclick="addChoice()">보기 추가</button>
                        <button type="button" onclick="removeChoice()">보기 삭제</button><br>
                    </div>
        
                    <h3>분류</h3>
                    <label>대분류:
                        <select id="main_category" name="main_category">
                            <option value="">대분류 선택</option>
                        </select>
                    </label><br>
                    <label>중분류:
                        <select id="sub_category" name="sub_category">
                            <option value="">중분류 선택</option>
                        </select>
                    </label><br>
                    <label>소분류:
                        <select id="minor_category" name="minor_category">
                            <option value="">소분류 선택</option>
                        </select>
                    </label><br>
        
                    <label>출처: <input type="text" name="source" value="{{ question.Source }}"></label><br>
                    <label>태그: <textarea name="tags" rows="3">{{ question.Tags }}</textarea></label><br>
        
                    <input type="submit" value="수정">
                </form>
                <form action="{{ url_for('index') }}" method="GET">
                    <button type="submit">취소</button>
                </form>
            </div>
        </body>
        
        </html>

        index.html
        ----------
        <!DOCTYPE html>
        <html lang="ko">
        
        <head>
            <meta charset="UTF-8">
            <title>문제를 출제 해 주세요.</title>
            <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
            <script>
        
                function showForm() {
                    const selectedType = document.querySelector('input[name="question_type"]:checked');
                    if (!selectedType) return; // 라디오 버튼이 선택되지 않은 경우 함수 종료
                    const type = selectedType.value;
                    const multipleChoice = document.getElementById('multiple_choice');
                    const subjective = document.getElementById('subjective');
                    const fillInTheBlank = document.getElementById('fill_in_the_blank');
        
                    multipleChoice.style.display = type === 'multiple' ? 'block' : 'none';
                    subjective.style.display = type === 'subjective' ? 'block' : 'none';
                    fillInTheBlank.style.display = type === 'fill_in_the_blank' ? 'block' : 'none';
        
                    document.getElementsByName('mc_question')[0].disabled = type !== 'multiple';
                    document.getElementsByName('mc_choices[]').forEach(field => field.disabled = type !== 'multiple');
                    document.getElementsByName('mc_answers[]').forEach(field => field.disabled = type !== 'multiple');
                    document.getElementsByName('sub_question')[0].disabled = type !== 'subjective';
                    document.getElementsByName('sub_answer')[0].disabled = type !== 'subjective';
                    document.getElementsByName('fib_question')[0].disabled = type !== 'fill_in_the_blank';
                    document.getElementsByName('fib_answer[]').forEach(field => field.disabled = type !== 'fill_in_the_blank');
                }
        
                let originalBlanks = [];
                let previousAnswers = [];
                let initialQuestion = '';
        
                function generateAnswerFields() {
                    const textarea = document.getElementsByName('fib_question')[0];
                    const question = textarea.value;
                    const blankMatches = question.match(/{\s*}/g) || [];
                    const blanks = blankMatches.map(blank => blank.length - 2); // 원래 공백 수 저장
                    const answerDiv = document.querySelector('#fib_answers');
        
                    // 기존 매핑을 저장
                    const existingAnswers = Array.from(document.getElementsByName('fib_answer[]')).map(input => input.value);
        
                    // 매핑을 유지하며 삭제된 blank에 대응하는 정답 제거
                    previousAnswers = previousAnswers.filter((_, index) => index < blanks.length);
        
                    if (answerDiv) {
                        answerDiv.innerHTML = '';
                        let updatedQuestion = question;
                        let currentAnswerIndex = 0;
        
                        for (let i = 0; i < blanks.length; i++) {
                            const label = document.createElement('label');
                            label.innerText = `Blank#${i + 1}: `;
                            const input = document.createElement('input');
                            input.type = 'text';
                            input.name = 'fib_answer[]';
                            input.required = true;
                            if (previousAnswers[currentAnswerIndex] !== undefined) {
                                input.value = previousAnswers[currentAnswerIndex];
                            } else if (existingAnswers[currentAnswerIndex] !== undefined) {
                                input.value = existingAnswers[currentAnswerIndex];
                            }
                            currentAnswerIndex++;
                            answerDiv.appendChild(label);
                            answerDiv.appendChild(input);
                            answerDiv.appendChild(document.createElement('br'));
        
                            updatedQuestion = updatedQuestion.replace(/{\s*}/, `{Blank#${i + 1}}`);
                        }
        
                        originalBlanks = blanks;
                        initialQuestion = textarea.value;
                        textarea.value = updatedQuestion;
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = true; // 버튼 비활성화
                    } else {
                        console.error("Element with id 'fib_answers' not found.");
                    }
                }
        
                function resetBlanks() {
                    const textarea = document.getElementsByName('fib_question')[0];
                    let i = 0;
                    textarea.value = textarea.value.replace(/{Blank#\d+}/g, (match) => {
                        const blankCount = originalBlanks[i++];
                        return `{${' '.repeat(blankCount)}}`;
                    });
                    document.querySelector('button[onclick="generateAnswerFields()"]').disabled = false; // 버튼 활성화
                }
        
                function enableGenerateButton() {
                    const textarea = document.getElementsByName('fib_question')[0];
                    if (textarea.value === initialQuestion) {
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = true;
                    } else {
                        document.querySelector('button[onclick="generateAnswerFields()"]').disabled = false;
                    }
                }
        
                document.addEventListener('DOMContentLoaded', () => {
                    showForm();
                    const textarea = document.getElementsByName('fib_question')[0];
                    textarea.addEventListener('focus', resetBlanks);
                    textarea.addEventListener('input', enableGenerateButton);
                });
        
                function updateAnswerOptions() {
                    const choices = document.getElementsByName('mc_choices[]');
                    const answerDiv = document.getElementById('mc_answers');
                    answerDiv.innerHTML = '<h4>정답</h4>';
        
        
                    choices.forEach((choice, index) => {
                        if (choice.value.trim() !== '') {
                            const label = document.createElement('label');
                            label.style.marginRight = '10px';
                            label.innerHTML = `<input type="checkbox" name="mc_answers[]" value="${index + 1}"> ${index + 1}`;
                            answerDiv.appendChild(label);
                        }
                    });
                }
        
        
                function addChoice() {
                    const choicesDiv = document.getElementById('choices');
                    const choiceCount = choicesDiv.getElementsByTagName('label').length + 1;
                    const newChoice = document.createElement('div');
                    newChoice.innerHTML = `<label>${choiceCount}. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"></textarea></label><br>`;
                    choicesDiv.appendChild(newChoice);
                    updateAnswerOptions();
                }
        
        
                function removeChoice() {
                    const choicesDiv = document.getElementById('choices');
                    const choices = choicesDiv.getElementsByTagName('div');
                    if (choices.length > 2) {
                        choicesDiv.removeChild(choices[choices.length - 1]);
                        updateAnswerOptions();
                    }
                }
        
        
                function openPopup() {
                    document.getElementById('voc-popup').style.display = 'block';
                    document.getElementById('voc-popup-overlay').style.display = 'block';
                }
        
        
                function closePopup() {
                    document.getElementById('voc-popup').style.display = 'none';
                    document.getElementById('voc-popup-overlay').style.display = 'none';
                }
        
        
                function loadCategories() {
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const mainCategorySelect = document.getElementById('main_category');
                            mainCategorySelect.innerHTML = '<option value="">대분류 선택</option>';
                            data.categories.forEach(category => {
                                const option = document.createElement('option');
                                option.value = category.name;
                                option.text = category.name;
                                mainCategorySelect.appendChild(option);
                            });
        
        
                            const lastMainCategory = '{{ request.cookies.get("last_main_category", "") }}';
                            const lastSubCategory = '{{ request.cookies.get("last_sub_category", "") }}';
                            const lastMinorCategory = '{{ request.cookies.get("last_minor_category", "") }}';
        
        
                            if (lastMainCategory) {
                                mainCategorySelect.value = lastMainCategory;
                                updateSubcategories(() => {
                                    const subCategorySelect = document.getElementById('sub_category');
                                    if (lastSubCategory) {
                                        subCategorySelect.value = lastSubCategory;
                                        updateMinorCategories(() => {
                                            const minorCategorySelect = document.getElementById('minor_category');
                                            if (lastMinorCategory) {
                                                minorCategorySelect.value = lastMinorCategory;
                                            }
                                        });
                                    }
                                });
                            }
                        });
                }
        
                function loadChartCategories() {
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const mainCategorySelect = document.getElementById('chart_main_category');
                            mainCategorySelect.innerHTML = '<option value="">대분류 선택</option>';
                            data.categories.forEach(category => {
                                const option = document.createElement('option');
                                option.value = category.name;
                                option.text = category.name;
                                mainCategorySelect.appendChild(option);
                            });
        
                            // const lastMainCategory = '{{ request.cookies.get("last_chart_main_category", "") }}';
                            // const lastSubCategory = '{{ request.cookies.get("last_chart_sub_category", "") }}';
        
                            // if (lastMainCategory) {
                            //     mainCategorySelect.value = lastMainCategory;
                            //     updateChartSubcategories(() => {
                            //         const subCategorySelect = document.getElementById('chart_sub_category');
                            //         if (lastSubCategory) {
                            //             subCategorySelect.value = lastSubCategory;
                            //         }
                            //     });
                            // }
        
                        });
                }
        
                function updateChart() {
                    const mainCategory = document.getElementById('chart_main_category').value;
                    const subCategory = document.getElementById('chart_sub_category').value;
                    fetch(`/updateChart?mainCategory=${mainCategory}&subCategory=${subCategory}`)
                        .then(response => response.text())
                        .then(chartBase64 => {
                            document.getElementById('chartImage').src = `data:image/png;base64,${chartBase64}`;
                        })
                        .catch(error => console.error('Error updating chart:', error));
                }
        
        
                function updateSubcategories(callback) {
                    const mainCategory = document.getElementById('main_category').value;
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const subCategorySelect = document.getElementById('sub_category');
                            subCategorySelect.innerHTML = '<option value="">중분류 선택</option>';
                            const minorCategorySelect = document.getElementById('minor_category');
                            minorCategorySelect.innerHTML = '<option value="">소분류 선택</option>';
                            const category = data.categories.find(category => category.name === mainCategory);
                            if (category) {
                                category.subcategories.forEach(subcategory => {
                                    const option = document.createElement('option');
                                    option.value = subcategory.name;
                                    option.text = subcategory.name;
                                    subCategorySelect.appendChild(option);
                                });
                            }
                            if (callback) callback();
                        });
                }
        
        
                function updateMinorCategories(callback) {
                    const mainCategory = document.getElementById('main_category').value;
                    const subCategory = document.getElementById('sub_category').value;
                    fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const minorCategorySelect = document.getElementById('minor_category');
                            minorCategorySelect.innerHTML = '<option value="">소분류 선택</option>';
                            const category = data.categories.find(category => category.name === mainCategory);
                            if (category) {
                                const subcategory = category.subcategories.find(sub => sub.name === subCategory);
                                if (subcategory) {
                                    subcategory.subcategories.forEach(minor => {
                                        const option = document.createElement('option');
                                        option.value = minor.name;
                                        option.text = minor.name;
                                        minorCategorySelect.appendChild(option);
                                    });
                                }
                            }
                            if (callback) callback();
                        });
                }
        
        
        
                function updateChartSubcategories() {
                    const mainCategory = document.getElementById('chart_main_category').value;
                    return fetch('/categories')
                        .then(response => response.json())
                        .then(data => {
                            const subCategorySelect = document.getElementById('chart_sub_category');
                            subCategorySelect.innerHTML = '<option value="">중분류 선택</option>';
                            const category = data.categories.find(category => category.name === mainCategory);
                            if (category) {
                                category.subcategories.forEach(subcategory => {
                                    const option = document.createElement('option');
                                    option.value = subcategory.name;
                                    option.text = subcategory.name;
                                    subCategorySelect.appendChild(option);
                                });
                            }
                        });
                }
        
        
                function validateForm(event) {
                    const questionType = document.querySelector('input[name="question_type"]:checked').value;
                    if (questionType === 'multiple') {
                        const answers = document.querySelectorAll('input[name="mc_answers[]"]:checked');
                        if (answers.length === 0) {
                            event.preventDefault();
                            alert('객관식 문제의 경우, 적어도 하나의 정답을 선택해야 합니다.');
                        }
                    }
                }
        
        
                document.addEventListener('DOMContentLoaded', () => {
                    document.getElementById('main_category').addEventListener('change', () => updateSubcategories());
                    document.getElementById('sub_category').addEventListener('change', () => updateMinorCategories());
                    document.getElementById('chart_main_category').addEventListener('change', () => {
                        updateChartSubcategories().then(() => updateChart());
                    });
                    document.getElementById('chart_sub_category').addEventListener('change', () => {
                        updateChart();
                    });
                    loadCategories();
                    loadChartCategories();
                    document.querySelector('form').addEventListener('submit', validateForm);
                    showForm();
                });
            </script>
            <style>
                .popup {
                    display: none;
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    width: 40%;
                    background-color: white;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                    padding: 20px;
                    z-index: 1000;
                    border-radius: 8px;
                }
        
        
                .popup-overlay {
                    display: none;
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.7);
                    z-index: 999;
                }
        
        
                .popup-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
        
        
                .popup-header h2 {
                    margin: 0;
                }
        
        
                .popup-header .close {
                    cursor: pointer;
                    font-size: 1.5em;
                }
        
        
                #feedback-button,
                #download-users-button {
                    position: fixed;
                    bottom: 20px;
                    padding: 10px 20px;
                    background-color: #007bff;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                }
        
        
                #feedback-button:hover,
                #download-users-button:hover {
                    background-color: #0056b3;
                }
        
        
                #feedback-button {
                    right: 20px;
                }
        
        
                #download-users-button {
                    right: 220px;
                }
        
        
                body {
                    padding: 0 10%;
                }
        
        
                textarea {
                    resize: vertical;
                }
        
        
                .title-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    margin-bottom: 20px;
                }
        
        
                .title-container h2 {
                    margin: 0;
                }
        
        
                .title-container .download-btn {
                    margin-left: 10px;
                }
        
        
                .admin-btns {
                    display: flex;
                    justify-content: center;
                    margin-bottom: 20px;
                }
        
        
                .admin-btns .download-btn {
                    margin: 0 10px;
                }
        
        
                .questions-list {
                    max-width: 800px;
                    margin: 0 auto;
                }
        
        
                .form-container {
                    max-width: 800px;
                    margin: 0 auto;
                }
        
        
                #mc_answers label {
                    display: inline-block;
                    margin-right: 10px;
                }
        
        
                .chart-container {
                    margin-top: 40px;
                    text-align: center;
                }
        
        
                .chart-title {
                    text-align: center;
                    margin-bottom: 20px;
                }
                
                #mc_question {
                    width: 100%;
                    height: 200px;
                }
                #preview_mc_question {
                    text-align: center;
                    margin-top: 10px;
                    max-width: 500px;  /* 이미지의 최대 너비를 100px로 설정 */
                    max-height: 500px; /* 이미지의 최대 높이를 100px로 설정 */
                }
                .img-container {
                    display: inline-block;
                    position: relative;
                }
                .img-container img {
                    margin-top: -20px;
                    max-width: 300px;
                    max-height: 300px;
                    margin-bottom: 30px;
                }
                .close-btn {
                    position: absolute;
                    top: 0;
                    right: 0;
                    background: red;
                    color: white;
                    border: none;
                    border-radius: 50%;
                    width: 25px;
                    height: 25px;
                    font-size: 16px;
                    cursor: pointer;
                    transform: translate(50%, -50%);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    padding: 0;
                    line-height: 1;
                }
            </style>
        </head>
        
        <body>
            <h1 id="main-title">SSAT 출제 시스템</h1>
            <h1>문제를 출제 해 주세요.</h1>
        
        
            {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
            <ul class="flashes">
                {% for category, message in messages %}
                <li class="{{ category }}">{{ message }}</li>
                {% endfor %}
            </ul>
            {% endif %}
            {% endwith %}
        
        
            <p>환영합니다, {{ user.id }}님! <a href="{{ url_for('logout') }}">로그아웃</a> | <a
                    href="{{ url_for('change_password') }}">비밀번호 변경</a></p>
        
        
            {% if user.id == 'admin' %}
            <p><a href="{{ url_for('manage_categories') }}">분류 관리</a></p>
            {% endif %}
        
        
            <form action="/submit" method="POST" class="form-container">
                <label>
                    <input type="radio" name="question_type" value="multiple" onclick="showForm()" {% if last_type=='multiple'
                        or last_type is none %}checked{% endif %}> 객관식
                </label>
                <label>
                    <input type="radio" name="question_type" value="subjective" onclick="showForm()" {% if
                        last_type=='subjective' %}checked{% endif %}> 주관식
                </label>
                <label>
                    <input type="radio" name="question_type" value="fill_in_the_blank" onclick="showForm()" {% if
                        last_type=='fill_in_the_blank' %}checked{% endif %}> 빈칸 채우기
                </label>
        
            
                <script>
                    // document.getElementById('inputArea').addEventListener('paste', function (event) {
                    //     const items = (event.clipboardData || event.originalEvent.clipboardData).items;
                    //     for (const item of items) {
                    //         if (item.kind === 'file' && item.type.startsWith('image/')) {
                    //             const blob = item.getAsFile();
                    //             const reader = new FileReader();
                    //             reader.onload = function (event) {
                    //                 const img = document.createElement('img');
                    //                 img.src = event.target.result;
                    //                 document.getElementById('preview').appendChild(img);
                    //             };
                    //             reader.readAsDataURL(blob);
                    //         }
                    //     }
                    // });
        
                    document.addEventListener('DOMContentLoaded', function() {
                        function handlePaste(event) {
                            const inputArea = event.target;
                            const parentDiv = inputArea.closest('#question');
                            const previewDiv = parentDiv.querySelector('#preview_mc_question');
                            const imageDataInput = parentDiv.querySelector('#imageData');
                            const items = (event.clipboardData || event.originalEvent.clipboardData).items;
                            for (const item of items) {
                                if (item.kind === 'file' && item.type.startsWith('image/')) {
                                    const blob = item.getAsFile();
                                    const reader = new FileReader();
                                    reader.onload = function(event) {
                                        // 기존 이미지와 컨텐츠 삭제
                                        previewDiv.innerHTML = '';
                                        imageDataInput.value = ''; // 이미지 데이터 삭제
        
                                        const imgContainer = document.createElement('div');
                                        imgContainer.className = 'img-container';
                                        const img = document.createElement('img');
                                        img.src = event.target.result;
                                        const closeBtn = document.createElement('button');
                                        closeBtn.textContent = 'x';
                                        closeBtn.className = 'close-btn';
                                        closeBtn.onclick = function() {
                                            previewDiv.removeChild(imgContainer);
                                            imageDataInput.value = '';  // 이미지 데이터 삭제
                                        };
                                        imgContainer.appendChild(img);
                                        imgContainer.appendChild(closeBtn);
                                        previewDiv.appendChild(imgContainer);
                                        imageDataInput.value = event.target.result;  // base64 데이터 저장
                                    };
                                    reader.readAsDataURL(blob);
                                }
                            }
                        }
        
                        document.querySelectorAll('#mc_question').forEach(function(inputArea) {
                            inputArea.addEventListener('paste', handlePaste);
                            });
                    });
                </script>
        
        
                <div id="multiple_choice"
                    style="display: {% if last_type == 'multiple' or last_type is none %}block{% else %}none{% endif %};">
                    <h3>객관식 문제</h3>
                    <div id="question">
                        <label for="mc_question">문제:</label>
                    </div>
                    <div id="question">
                        <textarea name="mc_question" id="mc_question" rows="3" required></textarea>
                        <input type="hidden" id="imageData" name="image_data">   <br>             
                        <div id="preview_mc_question"></div>
                    </div>
                    <div id="preview"></div>
                    <div id="choices">
                        <div><label>1. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                    required></textarea></label><br></div>
                        <div><label>2. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                    required></textarea></label><br></div>
                        <div><label>3. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                    required></textarea></label><br></div>
                        <div><label>4. <textarea name="mc_choices[]" rows="3" oninput="updateAnswerOptions()"
                                    required></textarea></label><br></div>
                    </div>
                    <button type="button" onclick="addChoice()">보기 추가</button>
                    <button type="button" onclick="removeChoice()">보기 제거</button><br>
                    <div id="mc_answers">
                        <h4>정답</h4>
                    </div>
                </div>
        
        
                <div id="subjective" style="display: {% if last_type == 'subjective' %}block{% else %}none{% endif %};">
                    <h3>주관식 문제</h3>
                    <label>문제: <textarea name="sub_question" rows="3" required></textarea></label><br>
                    <label>정답: <textarea name="sub_answer" rows="3" required></textarea></label><br>
                </div>
        
                <div id="fill_in_the_blank" style="display: {% if last_type == 'fill_in_the_blank' %}block{% else %}none{% endif %};">
                    <h3>빈칸 채우기 문제</h3>
                    <label>문제:  (작성예: 한국의 수도는{ }이고, 미국의 수도는 { }이다.)<textarea name="fib_question" rows="3" required></textarea></label><br>
                    <button type="button" onclick="generateAnswerFields()">정답 입력</button><br><br>
                    <div id="fib_answers"></div>
                    <div id="other_choices">
                        <h4>오답 보기 추가 (선택)</h4>
                        <div>
                            <textarea name="fib_others[]" rows="2"></textarea>
                        </div>
                    </div>
                    <button type="button" onclick="addChoice()">보기 추가</button>
                    <button type="button" onclick="removeChoice()">보기 삭제</button><br>
                </div>
                
                <script>
                    function addChoice() {
                        const otherChoicesDiv = document.getElementById('other_choices');
                        const newChoice = document.createElement('div');
                        newChoice.innerHTML = `<textarea name="fib_others[]" rows="2"></textarea>`;
                        otherChoicesDiv.appendChild(newChoice);
                    }
                
                    function removeChoice() {
                        const otherChoicesDiv = document.getElementById('other_choices');
                        const choices = otherChoicesDiv.getElementsByTagName('div');
                        if (choices.length > 1) {
                            otherChoicesDiv.removeChild(choices[choices.length - 1]);
                        }
                    }
                </script>
        
                <h3>분류</h3>
                <label>대분류:
                    <select id="main_category" name="main_category">
                        <option value="">대분류 선택</option>
                    </select>
                </label><br>
                <label>중분류:
                    <select id="sub_category" name="sub_category">
                        <option value="">중분류 선택</option>
                    </select>
                </label><br>
                <label>소분류:
                    <select id="minor_category" name="minor_category">
                        <option value="">소분류 선택</option>
                    </select>
                </label><br>
        
        
                <label>출처: <input type="text" name="source" value="{{ request.cookies.get('last_source', '') }}"></label><br>
                <label>태그: <textarea name="tags" rows="3">{{ last_tags }}</textarea></label><br>
        
        
                <input type="submit" value="제출">
            </form>
        
        
            <button id="feedback-button" onclick="openPopup()">기능제안 및 버그신고</button>
            {% if user.id == 'admin' %}
            <button id="download-users-button" onclick="window.location.href='{{ url_for('download_users') }}'">USER 목록
                다운로드</button>
            {% endif %}
        
        
            <div id="voc-popup" class="popup">
                <div class="popup-header">
                    <h2>기능제안 및 버그신고</h2>
                    <span class="close" onclick="closePopup()">&times;</span>
                </div>
                <form action="/submit_voc" method="POST" class="voc-container">
                    <label for="voc_type">유형:</label>
                    <select id="voc_type" name="voc_type" required>
                        <option value="Feature Suggestion">기능 제안</option>
                        <option value="Bug Report">버그 신고</option>
                    </select><br>
                    <label for="voc_content">내용:</label>
                    <textarea id="voc_content" name="voc_content" rows="4" required></textarea><br>
                    <input type="submit" value="제출">
                </form>
                {% if user.id == 'admin' %}
                <a href="{{ url_for('download_voc') }}" class="download-btn" style="float: right;">VOC JSON 다운로드</a>
                {% endif %}
            </div>
            <div id="voc-popup-overlay" class="popup-overlay" onclick="closePopup()"></div>
        
        
            <div class="container">
                <div class="title-container">
                    <h2>문제 목록</h2>
                    {% if user.id == 'admin' %}
                    <a href="{{ url_for('download') }}" class="download-btn">JSON 다운로드</a>
                    {% endif %}
                </div>
                <div class="question-count">문제 수: {{ questions | length }}</div> <br> <!-- 문제 수 표시 -->
                <div class="questions-list">
                    {% if questions %}
                    {% for question in questions %}
                    <div class="question">
                        <p><strong>ID:</strong> {{ question.ID }}</p>
                        <p><strong>유형:</strong> {{ question.Type }}</p>
                        <p><strong>문제:</strong> {{ question.Question }}</p>
                        {% if question.Choices %}
                        <p><strong>보기:</strong></p>
                        <ul>
                            {% for choice in question.Choices %}
                            <li>{{ choice }}</li>
                            {% endfor %}
                        </ul>
                        {% endif %}
                        <p><strong>정답:</strong>
                            {% if question.Type == 'fill_in_the_blank' %}
                        <ul>
                            {% if question.Answers is mapping %}
                            {% for key, value in question.Answers.items() %}
                            <li>{{ key }}: {{ value }}</li>
                            {% endfor %}
                            {% else %}
                            {% for answer in question.Answers %}
                            <li>{{ answer }}</li>
                            {% endfor %}
                            {% endif %}
                        </ul>
                        {% else %}
                        <ul>
                            {% for answer in question.Answers %}
                            <li>{{ answer }}</li>
                            {% endfor %}
                        </ul>
                        {% endif %}
                        </p>
                        <p><strong>대분류:</strong> {{ question.Category.main if question.Category else '' }}</p>
                        <p><strong>중분류:</strong> {{ question.Category.sub if question.Category else '' }}</p>
                        <p><strong>소분류:</strong> {{ question.Category.minor if question.Category else '' }}</p>
                        <p><strong>태그:</strong> {{ question.Tags }}</p>
                        <p><strong>출처:</strong> {{ question.Source }}</p>
                        <p><strong>제출자 ID:</strong> {{ question.SubmitterID }}</p>
                        <p><strong>제출 시간:</strong> {{ question.SubmissionTime }}</p>
                        <p><strong>마지막 수정 시간:</strong> {{ question.LastModifiedTime }}</p>
                        <form action="{{ url_for('edit_question', question_id=question.ID) }}" method="GET"
                            style="display:inline;">
                            <button type="submit">수정</button>
                        </form>
                        <form action="{{ url_for('delete_question', question_id=question.ID) }}" method="POST"
                            style="display:inline;">
                            <button type="submit">삭제</button>
                        </form>
                        <hr>
                    </div>
                    {% endfor %}
                    {% else %}
                    <p>아직 제출된 질문이 없습니다.</p>
                    {% endif %}
                </div>
        
            </div>
        
        
            <div class="chart-container">
                <h3>분류</h3>
                <label>대분류:
                    <select id="chart_main_category" name="chart_main_category">
                        <option value="">대분류 선택</option>
                    </select>
                </label><br>
                <label>중분류:
                    <select id="chart_sub_category" name="chart_sub_category">
                        <option value="">중분류 선택</option>
                    </select>
                </label><br>
                <h2 class="chart-title">출제 현황 (Total: {{ total_questions }})</h2>
                <img id="chartImage" src="data:image/png;base64,{{ chart_base64 }}" alt="출제 현황">
            </div>
        </body>
        
        </html>

        register.html
        -------------
        <!DOCTYPE html>
        <html lang="ko">
        <head>
           <meta charset="UTF-8">
           <title>회원가입</title>
           <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
        </head>
        <body>
           <div class="form-container">
               <h1>SSAT 출제 시스템</h1>
               <h1>회원가입</h1>
        
        
               {% with messages = get_flashed_messages(with_categories=true) %}
                   {% if messages %}
                       <ul class="flashes">
                           {% for category, message in messages %}
                               <li class="{{ category }}">{{ message }}</li>
                           {% endfor %}
                       </ul>
                   {% endif %}
               {% endwith %}
        
        
               <form action="{{ url_for('register') }}" method="POST">
                   <label>사용자 ID: <input type="text" name="user_id" required></label><br>
                   <label>비밀번호: <input type="password" name="password" required></label><br>
                   <input type="submit" value="회원가입">
               </form>
               <p class="switch-form">이미 계정이 있으신가요? <a href="{{ url_for('login') }}">로그인</a></p>
           </div>
        </body>
        </html>

        change_password.html
        --------------------
        <!DOCTYPE html>
        <html lang="ko">
        <head>
           <meta charset="UTF-8">
           <title>비밀번호 변경</title>
           <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
        </head>
        <body>
           <div class="form-container">
               <h1>SSAT 출제 시스템</h1>
               <h1>비밀번호 변경</h1>
        
        
               {% with messages = get_flashed_messages(with_categories=true) %}
                   {% if messages %}
                       <ul class="flashes">
                           {% for category, message in messages %}
                               <li class="{{ category }}">{{ message }}</li>
                           {% endfor %}
                       </ul>
                   {% endif %}
               {% endwith %}
        
        
               <form action="{{ url_for('change_password') }}" method="POST">
                   <label>기존 비밀번호: <input type="password" name="old_password" required></label><br>
                   <label>새 비밀번호: <input type="password" name="new_password" required></label><br>
                   <label>새 비밀번호 확인: <input type="password" name="confirm_password" required></label><br>
                   <input type="submit" value="변경">
               </form>
               <form action="{{ url_for('index') }}" method="GET">
                   <button type="submit">취소</button>
               </form>
           </div>
        </body>
        </html>

        login.html
        ----------
        <!DOCTYPE html>
        <html lang="ko">
        <head>
           <meta charset="UTF-8">
           <title>로그인</title>
           <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
        </head>
        <body>
           <div class="form-container">
               <h1>SSAT 출제 시스템</h1>
               <h1>로그인</h1>
        
        
               {% with messages = get_flashed_messages(with_categories=true) %}
                   {% if messages %}
                       <ul class="flashes">
                           {% for category, message in messages %}
                               <li class="{{ category }}">{{ message }}</li>
                           {% endfor %}
                       </ul>
                   {% endif %}
               {% endwith %}
        
        
               <form action="{{ url_for('login') }}" method="POST">
                   <label>사용자 ID: <input type="text" name="user_id" required></label><br>
                   <label>비밀번호: <input type="password" name="password" required></label><br>
                   <input type="submit" value="로그인">
               </form>
               <p class="switch-form">계정이 없으신가요? <a href="{{ url_for('register') }}">회원가입</a></p>
           </div>
        </body>
        </html>

    static/
        styles.css
        ----------
        body {
           font-family: Arial, sans-serif;
           background-color: #f5f5f5;
           margin: 0;
           padding: 0;
        }
        
        
        h1, h2 {
           text-align: center;
           margin-top: 20px;
        }
        
        
        .form-container {
           max-width: 800px;
           margin: 20px auto;
           padding: 20px;
           border: 1px solid #ccc;
           border-radius: 5px;
           background-color: #fff;
        }
        
        
        form {
           width: 100%;
           margin: 0 auto;
           padding: 20px 0;
        }
        
        
        label {
           display: block;
           margin-bottom: 10px;
        }
        
        
        input[type="text"],
        input[type="password"],
        input[type="number"],
        textarea {
           /* width: 100%; */
           padding: 8px;
           margin-top: 5px;
           margin-bottom: 20px;
           border: 1px solid #ccc;
           border-radius: 4px;
        }
        
        
        input[type="radio"] {
           margin-right: 10px;
        }
        
        
        button {
           padding: 10px 20px;
           margin-right: 10px;
           border: none;
           border-radius: 4px;
           background-color: #007bff;
           color: white;
           cursor: pointer;
        }
        
        
        button:hover {
           background-color: #0056b3;
        }
        
        
        input[type="submit"] {
           width: 100%;
           padding: 10px;
           border: none;
           border-radius: 4px;
           background-color: #28a745;
           color: white;
           cursor: pointer;
           font-size: 16px;
        }
        
        
        input[type="submit"]:hover {
           background-color: #218838;
        }
        
        
        .switch-form {
           text-align: center;
           margin-top: 20px;
        }
        
        
        #multiple_choice,
        #subjective {
           margin-top: 20px;
        }
        
        
        #choices label {
           display: flex;
           align-items: center;
        }
        
        
        #choices textarea {
           flex: 1;
           margin-left: 10px;
           margin-bottom: -20px;
        }
        
        #question {
           display: flex;
           margin-bottom: 20px;
        }
        
        #question label {
           display: block;
           margin-bottom: -20px;
        }
        
        
        #question textarea {
           flex: 1;
        }
        
        .flashes {
           list-style-type: none;
           padding: 0;
           margin: 20px auto;
           width: 50%;
           text-align: center;
        }
        
        
        .flashes li {
           padding: 10px;
           border-radius: 5px;
           margin-bottom: 10px;
           color: white;
        }
        
        
        .flashes li.success {
           background-color: #28a745;
        }
        
        
        .flashes li.error {
           background-color: #dc3545;
        }
        
        
        .container {
           max-width: 800px; /* 컨테이너의 최대 너비를 설정 */
           margin: 20px auto;
           padding: 20px;
           border: 1px solid #ccc;
           border-radius: 5px;
           background-color: #fff;
        }
        
        
        .questions-list {
           max-height: 400px;
           overflow-y: auto;
        }
        
        
        .question {
           margin-bottom: 20px;
        }
        
        
        .download-btn {
           display: inline-block;
           margin: 10px 0;
           padding: 10px 20px;
           border-radius: 4px;
           background-color: #007bff;
           color: white;
           text-decoration: none;
           cursor: pointer;
        }
        
        
        .download-btn:hover {
           background-color: #0056b3;
        }
        
        
        .popup {
           display: none;
           position: fixed;
           top: 50%;
           left: 50%;
           transform: translate(-50%, -50%);
           width: 40%;
           background-color: white;
           box-shadow: 0 5px 15px rgba(0,0,0,0.3);
           padding: 20px;
           z-index: 1000;
           border-radius: 8px;
        }
        
        
        .popup-overlay {
           display: none;
           position: fixed;
           top: 0;
           left: 0;
           width: 100%;
           height: 100%;
           background: rgba(0,0,0,0.7);
           z-index: 999;
        }
        
        
        .popup-header {
           display: flex;
           justify-content: space-between;
           align-items: center;
        }
        
        
        .popup-header h2 {
           margin: 0;
        }
        
        
        .popup-header .close {
           cursor: pointer;
           font-size: 1.5em;
        }
        
        
        #feedback-button {
           position: fixed;
           bottom: 20px;
           right: 20px;
           padding: 10px 20px;
           background-color: #007bff;
           color: white;
           border: none;
           border-radius: 4px;
           cursor: pointer;
           box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        
        
        #feedback-button:hover {
           background-color: #0056b3;
        }
        
        
        body {
           padding: 0 10%;
        }
        
        
        textarea {
           resize: vertical;
        }
        
        
        .title-container {
           display: flex;
           justify-content: center;
           align-items: center;
           margin-bottom: 20px;
        }
        
        
        .title-container h2 {
           margin: 0;
        }
        
        
        .title-container .download-btn {
           margin-left: 10px;
        }
        
        
        .admin-btns {
           display: flex;
           justify-content: center;
           margin-bottom: 20px;
        }
        
        
        .admin-btns .download-btn {
           margin: 0 10px;
        }
        
        
        .questions-list {
           max-width: 800px;
           margin: 0 auto;
        }
        
        
        .form-container {
           max-width: 800px;
           margin: 0 auto;
        }
        
        
        #mc_answers label {
           display: inline-block;
           margin-right: 10px;
        }
